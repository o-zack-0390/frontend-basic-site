:root {
  --font-family-anton: "Anton", sans-serif;
  --font-family-noto-sans-jp: "Noto Sans JP", sans-serif;

  --color-white: #fffefc;
  --color-black: #020911;
  --color-accent-red: #f20574;
  --color-accent-yellow: #f2e52e;
  --color-background-black: #171525;
  --color-background-navy: #030427;
  --color-form-background-yellow: #fffab9;
  --color-form-placeholder-gray: #ad9783;
  --color-form-border-red: #df6da2;
  --color-button-hover-red: #f043a5;
  --color-course-hover-yellow: #f4e877;
  --color-hero-overlay: rgba(57, 24, 111, 0.4);
  --color-course-overlay: rgba(32, 8, 19, 0.63);
}

/* global */
*,
*::before,
*::after{
  box-sizing: border-box;
}

body{
  margin: 0;
  font-family: var(--font-family-noto-sans-jp);
  /* bodyタグは初期値でmarginが設定されているため 0 に上書きしておく */
}

img{
  display: block;
}

/* header */
.header{
  height: 80px;
  width: 100%;
  background-color: var(--color-background-black);
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 2;
  /*
    justify-content: center; -> 子要素をX軸方向に中央揃え
    align-items: center;     -> 子要素をY軸方向に中央揃え
    position: fixed;         -> 要素を追従させる. 今回の場合は画面上から0px、画面左から0pxの位置に要素が配置され追従する
  */
}

.header-logo-wrapper{
  margin: 0;
  /* 
    ブラウザ側で user agent stylesheet というセレクタに 
    margin が初期値として設定されているので上書き 
  */
}

.header-logo{
  height: 50px;
}

@media (max-width: 750px){
  .header{
    height: 60px;
  }

  .header-logo{
    height: 30px;
  }
}

/* hero */
.hero{
  background-image: url("../images/hero.png");
  background-size: cover;
  padding: 96px 40px;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  margin-top: 80px;
  /*
    padding             -> 要素の「内容と枠の間」の余白を設定
    justify-content     -> flex-direction と並行する方向のレイアウトを調整
    flex-end            -> 子要素を右に寄せる
    align-items: center -> 子要素を中央に配置
    position: relative  -> その要素のもとのあった場所(static指定時)を起点として位置を決定
    margin-top: 80px    -> header 要素と重なってしまうので header の高さと同じ 80px を指定
  */
}

.hero::after{
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--color-hero-overlay);
  /*
    content            -> これが無いと background-color が適用されない. ""の中に文章を記載できる
    position: absolute -> 親要素を起点として位置を決定
  */
}

.hero-container{
  width: 100%;
  max-width: 1000px;
  display: flex;
  justify-content: flex-end;
  z-index: 1;
  /*
    justify-content -> flex-direction と並行する方向のレイアウトを調整
    flex-end        -> 子要素を右に寄せる
    z-index         -> 要素を重ねる順番を指定. 値が大きいほど上に重なる
  */
}

.hero-texts{
  color: var(--color-accent-yellow);
  display: flex;
  flex-direction: column;
  gap: 30px;
  /*
    flex-direction -> 子要素を「 縦並び(column) or 横並び(row) 」にする
    gap            -> 子要素同士の間隔。第一引数が行、第二引数が列 (https://ics.media/entry/210628/)
  */
}

.hero-main-copy{
  font-family: var(--font-family-anton);
  font-size: 64px;
  line-height: 1;
  margin: 0; 
  letter-spacing: 0.05em;
  color: var(--color-accent-yellow);
  /*
    line-height    -> 文字の大きさと上下の余白を合わせた高さ
    em             -> 文字の高さを基準とした単位。フォントサイズが10pxで1emなら10px、5emなら50px
    letter-spacing -> 文字の間隔
    margin         -> 要素の外側を囲う余白
  */
}

.hero-main-copy-accent{
  color: var(--color-accent-red);
}

.hero-sub-copy{
  font-family: var(--font-family-noto-sans-jp);
  font-size: 16px;
  margin: 0
}

@media (max-width: 750px){
  .hero{
    margin-top: 60px;
    padding: 40px 20px;
    /*
      margin-top: 60px    -> header 要素と重なってしまうので header の高さと同じ 60px を指定
    */
  }

  .hero-container{
    justify-content: flex-start;
  }

  .hero-texts{
    gap: 20px;
  }
}

/* about */
.about{
  background-color: var(--color-background-black);
  padding: 80px 0px;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  /*
    padding             -> 要素の「内容と枠の間」の余白を設定
    justify-content     -> flex-direction と並行する方向のレイアウトを調整
    align-items         -> flex-direction と交差する方向のレイアウトを調整
    position: relative  -> その要素のもとのあった場所(static指定時)を起点として位置を決定
  */
}

.about-container{
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 0px 40px;
  gap: 40px;
  /*
    justify-content     -> flex-direction と並行する方向のレイアウトを調整
    align-items         -> flex-direction と交差する方向のレイアウトを調整
    flex-end            -> 子要素を中央に寄せる
  */
}

.about-title{
  color: var(--color-white);
  line-height: 1.5;
  font-family: var(--font-family-anton);
  font-size: 32px;
  letter-spacing: 0.02em;
  /*
    line-height    -> 文字の大きさと上下の余白を合わせた高さ. font-size × 数値 で高さが決まる.
    letter-spacing -> 文字の高さを基準とした単位. フォントサイズが10pxで1emなら10px、5emなら50px
    letter-spacing -> 文字の間隔
    margin         -> 要素の外側を囲う余白
  */
}

.about-header-accent-red{
  color: var(--color-accent-red);
}

.about-header-accent-yellow{
  color: var(--color-accent-yellow);
}

.about-content{
  display: flex;
  flex-direction: row;
  gap: 20px
  /*
    flex-direction -> 子要素を「 縦並び(column) or 横並び(row) 」にする
    gap            -> 子要素同士の間隔。第一引数が行、第二引数が列 (https://ics.media/entry/210628/)
  */
}

.about-texts{
  height: auto;
  width: 100%;
  max-width: 460px;
  font-size: 16px;
  color: var(--color-white);
  margin: auto;
  /*
    height: auto -> 画面幅に応じてテキスト文をY軸方向に寄せる
  */
}

.about-image{
  min-width: 320px;
  min-height: 180px;
  max-width: 320px;
  max-height: 180px;
  background-image: url("../images/live.png");
  background-size: cover;
  /*
    最小サイズと最大サイズを同じにすることで、レイアウトが変わっても常に同じサイズで表示
  */
}

@media (max-width: 750px) {
  .about{
    padding: 40px 20px;
  }

  .about-container{
    padding: 0px 0px;
  }

  .about-title{
    line-height: 1.5;
    font-size: 24px;
    letter-spacing: 0.02em;
  }

  .about-texts{
    max-width: 100%;
    margin: 16px 0px;
  }
  
  .about-image{
    display: none;
  }
}

/* courses */
.courses{
  background-color: var(--color-background-navy);
  padding: 80px 0px;
  display: flex;
  justify-content: center;
  align-items: center;
  /*
    padding         -> 要素の「内容と枠の間」の余白を設定
    justify-content -> flex-direction と並行する方向のレイアウトを調整
    align-items     -> flex-direction と交差する方向のレイアウトを調整
  */
}

.courses-container{
  width: auto;
  max-width: 880px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 0px 40px;
  gap: 40px;
  /*
    padding: 0px 40px -> 画面幅を縮小し続けても常に左右40pxの余白が生まれる
    gap: 40px         -> 子要素間の間隔を指定
  */
}

.courses-title{
  color: var(--color-white);
  line-height: 1.5;
  font-family: var(--font-family-anton);
  font-size: 32px;
  letter-spacing: 0.02em;
  /*
    line-height    -> 文字の大きさと上下の余白を合わせた高さ. font-size × 数値 で高さが決まる.
    letter-spacing -> 文字の高さを基準とした単位. フォントサイズが10pxで1emなら10px、5emなら50px
    letter-spacing -> 文字の間隔
    margin         -> 要素の外側を囲う余白
  */
}

.courses-cards{
  display: flex;
  flex-direction: column;
  gap: 20px;
  /*
    子要素に4枚のカードが縦に並ぶので、flex-direction に column を設定
  */
}

.courses-card{
  display: flex;
  min-height: 150px;
  text-decoration: none;
  box-shadow: 4px 4px 0 var(--color-accent-red);
  position: relative;
  transition-duration: 0.3s;
  /*
    カードのスタイル。
    子要素の画像とテキスト文が横並びになる

    box-shadow: 4px 4px 0 -> 要素の右側と下側に4pxの影を描画. 影のぼかし度は 0 に指定.
  */
}

.courses-card:hover{
  box-shadow: 12px 12px 1px var(--color-accent-red);
  /*
    ボバーしたら box-shadow の値を 4px -> 12px に変更.
  */
}

.courses-card-image{
  width: 250px;
  display: flex;
  justify-content: center;
  align-items: center;
  flex: 0 0 auto;
  background: url("../images/live.png");
  background-size: cover;
  position: relative;
  /*
    flex: 0 0 auto -> 下記3つの機能で構成されている
     
      flex-grow: 要素が親要素内でどれだけ伸びるかを指定. ここでは0なので、この要素は伸びない

      flex-shrink: 要素が親要素内でどれだけ縮むかを指定. ここでは0なので、この要素は縮まない

      flex-basis: 要素の初期のサイズを指定. ここではautoが指定されており、内容や幅に基づいてサイズが自動的に設定される.
  */
}

.courses-card-image::before{
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--color-course-overlay);
  /*
    content            -> これが無いと background-color が適用されない. ""の中に文章を記載できる
    position: absolute -> 親要素を起点として位置を決定
  */
}

.courses-card-details{
  color: var(--color-accent-red);
  align-self: flex-end;
  /*
    align-self -> Flexアイテムに対して垂直方向の配置を指定. flex-endにすると右寄せで配置
  */
}

.courses-card-image-title{
  font-family: var(--font-family-anton);
  font-size: 32px;
  letter-spacing: 0.05em;
  color: var(--color-white);
  margin: 32px 0px;
  position: relative;
  /*
    position: relative を設定することで Frontman が一番上に表示された.
    理由は不明
  */
}

.courses-card-content{
  background: var(--color-accent-yellow);
  padding: 20px;
  display: flex;
  flex-direction: column;
  font-size: 16px;
  transition-duration: 0.3s;
}

.courses-card-content:hover{
  background-color: var(--color-course-hover-yellow);
}

.courses-card-text{
  color: var(--color-black);
  flex: 1;
  /*
    flex: 1 -> これの設定に含まれている flex-grow が無いとflexコンテナ(親要素)の下に余白が生じる.
  */
}

.courses-details-button{
  background: var(--color-accent-red);
  height: 60px;
  padding: 0 40px;
  text-decoration: none;
  box-shadow: 4px 4px 0 var(--color-accent-yellow);
  display: flex;
  justify-content: center;
  align-items: center;
  align-self: stretch;
  gap: 10px;
  transition: 0.3s;
  /*
    align-self: stretch -> 親要素の横幅に合わせてflexアイテムを伸縮
  */
}

.courses-details-button:hover{
  background: var(--color-button-hover-red);
  box-shadow: 12px 12px 0 var(--color-course-hover-yellow);
}

.courses-details-button-text{
  font-size: 20px;
  color: var(--color-white);
  text-align: center;
  flex-grow: 1;
  /*
    flex-grow: 1 -> 余白がある場合 flex-grow の値に応じて伸長
  */
}

.courses-details-button-image{
  background-image: url("../images/arrow-right.svg");
  background-size: cover;
  height: 40px;
  width: 40px;
}

@media (max-width: 750px){
  .courses{
    background-color: var(--color-background-navy);
    padding: 40px 20px;
    display: flex;
    justify-content: center;
    align-items: center;
    /*
      padding         -> 要素の「内容と枠の間」の余白を設定
      justify-content -> flex-direction と並行する方向のレイアウトを調整
      align-items     -> flex-direction と交差する方向のレイアウトを調整
    */
  }
  
  .courses-container{
    width: 100%;
    max-width: 710px;
    padding: 0px 0px;
    gap: 40px;
    /*
      padding: 0px 40px -> 画面幅を縮小し続けても常に左右40pxの余白が生まれる
      gap: 40px         -> 子要素間の間隔を指定
    */
  }

  .courses-title{
    font-size: 24px;
  }

  .courses-card{
    flex-direction: column;
  }

  .courses-card-image{
    height: 200px;
    width: 100%;
  }

  .courses-card-image-title{
    font-size: 24px;
    margin: 24px 0px;
  }

  .courses-card-text{
    font-size: 12px;
  }

  .courses-card-details{
    font-size: 12px;
  }

  .courses-details-button{
    height: 40px;
    padding: 0px 20px;
  }

  .courses-details-button-text{
    font-size: 14px;
  }

  .courses-details-button-image{
    height: 30px;
    width: 30px;
  }
}

/* sign up */
.signup{
  padding: 80px 0px;
  background-color: var(--color-accent-yellow);
  display: flex;
  justify-content: center;
  align-items: center;
  /*
    justify-content: center -> 子要素のコンテナをX軸方向に中央寄せにする
    align-items: center     -> 子要素のコンテナをY軸方向に中央寄せにする
  */
}

.signup-container{
  width: 100%;
  max-width: 880px;
  padding: 0px 40px;
  background-color: var(--color-accent-yellow);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 40px;
}

.signup-title{
  font-size: 32px;
  font-family: var(--font-family-anton);
  letter-spacing: 0.02em;
}

.signup-text{
  width: 100%;
}

.signup-forms{
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 20px;
}

.signup-form{
  width: 100%;
  display: flex;
}

.signup-form-label{
  font-size: 20px;
  flex: 0 0 250px;
  /*
    flex: 0 0 250px -> 拡大や縮小はせず、初期の width を 250px に設定 
  */
}

.signup-form-input{
  font-size: 16px;
  background-color: var(--color-form-background-yellow);
  border: 1px solid var(--color-form-border-red);
  border-radius: 8px;
  padding: 10px;
  flex: 1;
  /*
    flex: 1 -> 下記3つをまとめて定義

      flex-grow   -> 余白があるときに、他の子要素と1:nの比率で余白を配分して拡大
      flex-shrink -> サイズが親要素を超えた場合、他の子要素と1:nの比率で収縮する割合を配分して縮小
      flex-basis  -> widthの初期値を 0px に設定
  */
}

.signup-form-submit{
  background: var(--color-accent-red);
  height: 60px;
  padding: 0 40px;
  margin: 20px 0px 0px 0px;
  text-decoration: none;
  box-shadow: 4px 4px 0 var(--color-black);
  display: flex;
  justify-content: center;
  align-items: center;
  align-self: stretch;
  gap: 10px;
  transition: 0.3s;
  /*
    align-self: stretch -> 親要素の横幅に合わせてflexアイテムを伸縮
  */
}

.signup-form-submit:hover{
  background: var(--color-button-hover-red);
  box-shadow: 12px 12px 0 var(--color-black);
}

.signup-form-submit-text{
  font-size: 20px;
  color: var(--color-white);
  text-align: center;
  flex-grow: 1;
  /*
    flex-grow: 1 -> 余白がある場合 flex-grow の値に応じて伸長
  */
}

.signup-form-submit-image{
  background-image: url("../images/arrow-right.svg");
  background-size: cover;
  height: 40px;
  width: 40px;
}

@media (max-width: 750px){
  .signup{
    padding: 40px 0px;
  }

  .signup-container{
    padding: 0px 20px;
  }

  .signup-title{
    font-size: 24px;
  }

  .signup-forms{
    gap: 10px;
  }

  .signup-form{
    flex-direction: column;
    gap: 5px;
  }

  .signup-form-label{
    font-size: 16px;
    flex: 1;
    /*
      flex: 0 0 250px -> 拡大や縮小はせず、初期の width を 250px に設定 
    */
  }

  .signup-form-input{
    font-size: 12px;
    padding: 8px;
  }

  .signup-form-submit{
    height: 40px;
    padding: 0 20px;
  }

  .signup-form-submit-text{
    font-size: 14px;
  }

  .signup-form-submit-image{
    height: 30px;
    width: 30px;
  }
}

.footer{
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: var(--color-background-black);
  padding: 60px 0px;
}

.footer-text{
  color: var(--color-white);
  margin: 0px;
}

@media (max-width: 750px){
  .footer{
    padding: 40px 0px;
  }

  .footer-text{
    font-size: 12px;
  }
}